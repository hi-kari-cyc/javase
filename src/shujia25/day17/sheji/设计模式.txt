设计模式：经历过许多开发程序员进行开发后得到的经验总结。
分类：
    行为型模式：
        就是类中的方法
    结构型模式：
        成员变量私有化就是
    创建型模式
        a. 简单工厂模式

        b. 工厂方法模式
        c. 单例模式（十分重要，面试必问）一个类在java虚拟机运行过程中，只会存在一个对象
            饿汉式
            懒汉式

a. 简单工厂模式（Simple Factory Pattern）：
    简单工厂模式是一种创建型设计模式，它通过一个工厂类来创建不同类型的对象，而不需要直接在客户端代码中实例化具体的对象。
    在简单工厂模式中，客户端只需要知道所需对象的类型，然后通过工厂类的静态方法或实例方法来获取相应的对象实例。
    在工厂类中编写创建方法，通过工厂类创建不同类型的对象

b. 工厂方法模式（Factory Method Pattern）：
    工厂方法模式是一种创建型设计模式，它将对象的创建委托给具体的工厂类，从而解耦了客户端代码和具体对象的创建过程。
    在工厂方法模式中，定义一个抽象工厂类，该类包含一个抽象的工厂方法，由具体的工厂类继承并实现该工厂方法来创建具体的对象。
    不同于简单工厂模式的是每个对象有单独的工厂类，单独的工厂类继承总工厂类，通过独有的工厂类创建对应的对象

c. 单例模式（Singleton Pattern）：
    单例模式是一种创建型设计模式，它保证一个类只能创建一个对象，并提供一个全局访问点来获取该对象。
    单例模式通常通过将类的构造方法私有化，然后提供一个静态方法或静态变量来获取类的实例。
    这样可以确保在整个应用程序中只存在一个实例，且该实例可以被全局访问。